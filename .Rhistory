# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff) # 27
# Reflection 5 (answer in README.md file)
# What do you think about the number and scale of the inconsistencies in the data? Does the fact that there are inconsistencies mean that people should not use this data? Why or why not?
# 5. You Turn!-------------------------------------------------
# 5.a Now it's your turn to ask your own question! Come up with a new question about this COVID data, and then write code to answer it (at least 2-3 lines)
# QUESTION:  Write your question in English language words here
# What is the growth rate(%) of cases of national-base? (Create a new column called `growth_rate` in `national` and save as my_answer)
# And what is the top three highest growth rate and corresponding date? (Save as max_growth_rate)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
mutate(growth_rate = round((cases - lag(cases)) / lag(cases) * 100, digits = 2))
my_answer <- my_answer %>%
arrange(desc(growth_rate))
head(my_answer, 3)
# Reflection 6 (answer in README.md file)
# Why were you interested in this particular question? Were you able to answer your question with code? What did you learn?
# 6. Your learning  ----------------------------------------------------------
# Reflection 7 (answer in README.md file)
# After completing this assignment, what, if anything, made you curious? What, if anything, surprised you about this coding work? What might you do the same or differently on your next data wrangling project?
# Congrats! You're finished. Don't forget to save, push all changes to GitHub, and submit the link to your repository on Canvas!
highest_cases_in_each_state
income.carb.relation
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
setwd("~/Desktop/2023 Winter/INFO201/final/exploratory-analysis-Tyler-Vuu")
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
# 1. Select the columns that includes important nutritions
Nutrition.df <- Diet.df %>%
select(id,totalpro, carb, totalfat)
library(dplyr)
# 1. Select the columns that includes important nutritions
Nutrition.df <- Diet.df %>%
select(id,totalpro, carb, totalfat)
income.df <- Participant.df %>%
select(id, fam_income)
# 2. Calculate the average nutrition intake according to each id
Nutrition.avg.df <- Nutrition.df %>%
group_by(id) %>%
summarize(avg_pro = mean(totalpro,na.rm = T),
avg_carb = mean(carb,na.rm = T),
avg_fat = mean(totalfat, na.rm = T))
# join the data set
income.nutrition <- left_join(Nutrition.avg.df, income.df, by = "id")
# coefficients
ols.summary <- summary(lm(income.nutrition$avg_carb ~ income.nutrition$fam_income))
income.carb.relation <- ols.summary$coefficients[2]
income.carb.relation
# store in the list
summary_info <- list()
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
library(dplyr)
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
setwd("~/Desktop/exploratory-analysis-Tyler-Vuu")
library(dplyr)
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
# how many participants are in the study (unique IDs)
num_participants <- length(unique(Participant.df$id))
# average, min, max bmi
avg_bmi <- mean(Participant.df$bmi_adults, na.rm = TRUE)
min_bmi <- min(Participant.df$bmi_adults, na.rm = TRUE)
max_bmi <- max(Participant.df$bmi_adults, na.rm = TRUE)
# average fam income
avg_fam_income <- mean(Participant.df$fam_income, na.rm = TRUE)
# how many have some other special diet
special_diet <- Participant.df %>%
filter(special_diet != '0')
num_spec_diet <- nrow(special_diet)
# female(2) vs male(1) ratio
num_female <- nrow(Participant.df %>%
filter(sex == '2'))
num_male <- nrow(Participant.df %>%
filter(sex == '1'))
filter(sex == '1'))
num_female <- nrow(Participant.df %>%
filter(sex == '2'))
num_male <- nrow(Participant.df %>%
filter(sex == '1'))
summary_info <- list()
summary_info$num_female <- num_female
summary_info$num_male <- num_male
summary_info$avg_bmi <- avg_bmi
summary_info$min_bmi <- min_bmi
summary_info$max_bmi <- max_bmi
summary_info
library(dplyr)
library(ggplot2)
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
# group by fam_size, calculate for average income, average bmi, average bmi_cat (classification of under/overweight)
fam_df <- Participant.df %>%
select(fam_size, fam_income, bmi_adults, bmi_cat) %>%
group_by(fam_size) %>%
summarize(across(everything(), list(mean = mean), na.rm = TRUE))
View(fam_df)
fam_df <- round(fam_df, digits = 2)
setwd("~/Desktop/exploratory-analysis-Tyler-Vuu")
#data
income_df <- read.csv("https://www.globaldietarydatabase.org/system/files/microdata/data-upload/2020-12/USA_NHANES_2013-2014_ParticipantData.csv")
meal_type_df <- read.csv("https://www.globaldietarydatabase.org/system/files/microdata/data-upload/2020-12/USA_NHANES_2013-2014_DietData_part2.csv")
income_df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
meal_type_df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
income <- income_df %>% select(hh_income, na.rm = TRUE)
income <- income_df %>% select(hh_income)
meals <- meal_type_df %>% select(meal_type)
income_meals_df <- income_df %>% left_join(meal_type_df, by = "id")
income_meals_df <- income_meals_df %>% select(id, hh_income, meal_type)
income_meals_df <- income_meals_df %>% na.omit()
income_meals_count <- income_meals_df %>%
group_by(hh_income, meal_type) %>%
summarize(count = n())
meal.plot <- ggplot(income_meals_count, aes(x = hh_income, y = count, fill = meal_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Meal Type vs. Household Income", x = "Household Income", y = "Count", fill = "Meal Type")
meal.plot
library(dplyr)
library(ggplot2)
library(reshape2)
# data
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
# 1. Select the columns that includes important nutritions
Nutrition.df <- Diet.df %>%
select(id,totalpro, carb, totalfat)
income.df <- Participant.df %>%
select(id, fam_income)
# 2. Calculate the average nutrition intake according to each id
Nutrition.avg.df <- Nutrition.df %>%
group_by(id) %>%
summarize(avg_pro = mean(totalpro,na.rm = T),
avg_carb = mean(carb,na.rm = T),
avg_fat = mean(totalfat, na.rm = T))
# join the data set
income.nutrition <- left_join(Nutrition.avg.df, income.df, by = "id")
#melt data frame to better visulization
melt.df <- melt(income.nutrition, id = c("id", "fam_income"))
# plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income,
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_point() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income,
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_density() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income,
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income[fam_income < 3],
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_boxplot() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income[fam_income = 3],
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_boxplot() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income,
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_boxplot() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income,
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_curve() +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = fam_income,
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_curve(xend = 10,
yend = 100) +
labs(x = "Family Income Level",
y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = "",
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar(stat="identity") +
labs(y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = "",
y = value,
color = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar(stat="identity") +
coord_polar("y", start=0)+
labs(y = "Average Nutrition Intake (g)",
color = "Three Main Nutritions")
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = "",
y = value,
fill = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar(stat="identity") +
coord_polar("y", start=0)+
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = lower income, label = variable), color = "white", size=6)
nutrition.plot <- ggplot(melt.df,mapping = aes(x = "",
y = value,
fill = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar(stat="identity") +
coord_polar("y", start=0)+
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = "lower income", label = variable), color = "white", size=6)
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = "",
y = value,
fill = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar(stat="identity") +
coord_polar("y", start=0)+
theme_void() +
geom_text(aes(y = "lower income"), color = "white", size=6)
nutrition.plot
nutrition.plot <- ggplot(melt.df,mapping = aes(x = "",
y = value,
fill = variable)) +
scale_color_brewer(palette = "Set2") +
geom_bar(stat="identity",color = "white") +
coord_polar("y", start=0)+
theme_void()
nutrition.plot
# For lower income
lower.income <- income.nutrition %>%
filter(fam_income < 5)
# For higher income
higher.income <- income.nutrition %>%
filter(fam_income >= 5)
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
# 1. Select the columns that includes important nutritions
Nutrition.df <- Diet.df %>%
select(id,totalpro, carb, totalfat)
income.df <- Participant.df %>%
select(id, fam_income)
# 2. Calculate the average nutrition intake according to each id
Nutrition.avg.df <- Nutrition.df %>%
group_by(id) %>%
summarize(avg_pro = mean(totalpro,na.rm = T),
avg_carb = mean(carb,na.rm = T),
avg_fat = mean(totalfat, na.rm = T))
# join the data set
income.nutrition <- left_join(Nutrition.avg.df, income.df, by = "id")
# For lower income
lower.income <- income.nutrition %>%
filter(fam_income < 5)
# For higher income
higher.income <- income.nutrition %>%
filter(fam_income >= 5)
View(higher.income)
higher.income <- higher.income %>%
mutate(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
higher.income <- higher.income %>%
summarize(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
lower.income <- lower.income %>%
summarize(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
total <- sum(lower.income[1,])
total
total <- sum(higher.income[1,])
total
lower.income <- melt(lower.income)
View(lower.income)
lower.income$prop <- value/total
lower.income$prop <- lower.income$value/total
# join the data set
income.nutrition <- left_join(Nutrition.avg.df, income.df, by = "id")
lower.income <- lower.income %>%
summarize(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
total <- sum(lower.income[1,])
lower.income <- melt(lower.income)
lower.income$prop <- lower.income$value/total
Diet.df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
# 1. Select the columns that includes important nutritions
Nutrition.df <- Diet.df %>%
select(id,totalpro, carb, totalfat)
income.df <- Participant.df %>%
select(id, fam_income)
# 2. Calculate the average nutrition intake according to each id
Nutrition.avg.df <- Nutrition.df %>%
group_by(id) %>%
summarize(avg_pro = mean(totalpro,na.rm = T),
avg_carb = mean(carb,na.rm = T),
avg_fat = mean(totalfat, na.rm = T))
# join the data set
income.nutrition <- left_join(Nutrition.avg.df, income.df, by = "id")
lower.income <- lower.income %>%
summarize(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
# For lower income
lower.income <- income.nutrition %>%
filter(fam_income < 5)
lower.income <- lower.income %>%
summarize(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
total <- sum(lower.income[1,])
lower.income <- melt(lower.income)
lower.income$prop <- lower.income$value/total
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = value, label = prop), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
mycols <- c( "#EFC000FF", "#868686FF", "#CD534CFF")
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = value, label = prop), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0)+
geom_text(aes(y = value, label = prop))+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = prop), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = round(prop*100, digits = 2)), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y =prop, label = round(prop*100, digits = 2)), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void() +
lab(title = "lower income group")
ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void() +
labs(title = "lower income group")
# For higher income
higher.income <- income.nutrition %>%
filter(fam_income >= 5)
higher.income <- higher.income %>%
summarize(total.carb = sum(avg_carb, na.rm = T),
total.fat = sum(avg_fat, na.rm = T),
total.pro = sum(avg_pro, na.rm = T))
total <- sum(higher.income[1,])
higher.income <- melt(higher.income)
higher.income$prop <- higher.income$value/total
ggplot(higher.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void() +
labs(title = "lower income group")
ggplot(higher.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void() +
labs(title = "higher income group")
library(gridExtra)
grid.arrange(plot1, plot2)
plot1 <- ggplot(lower.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void() +
labs(title = "lower income group")
plot2 <- ggplot(higher.income, aes(x = "", y = prop, fill = variable)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(label = ""), color = "white")+
scale_fill_manual(values = mycols) +
theme_void() +
labs(title = "higher income group")
grid.arrange(plot1, plot2)
grid.arrange(plot1, plot2, ncol = 1)
grid.arrange(plot1, plot2, ncol = 2)
nutrition.plot <- grid.arrange(plot1, plot2, ncol = 2)
nutrition.plot
setwd("~/Desktop/exploratory-analysis-Tyler-Vuu")
#data
income_df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
meal_type_df <- read.csv("USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
participant_data = read.csv("https://www.globaldietarydatabase.org/system/files/microdata/data-upload/2020-12/USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = FALSE)
income <- income_df %>% select(hh_income)
Participant.df <- read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
Diet.df <- read.csv("https://www.globaldietarydatabase.org/system/files/microdata/data-upload/2020-12/USA_NHANES_2013-2014_DietData_part2.csv", stringsAsFactors = F)
setwd("~/Desktop/exploratory-analysis-Tyler-Vuu")
participant_data = read.csv("USA_NHANES_2013-2014_ParticipantData.csv", stringsAsFactors = F)
#Loading datasets and corresponding ID's
BMI_data <- participant_data %>%
select(id, bmi_adults, bmi_chld)
fam_income <- participant_data %>%
select(id, fam_income)
#Averaging the BMI's for each income level
BMI_average_df <- participant_data %>%
group_by(id) %>%
summarize(avg_adult = mean(bmi_adults, na.rm = TRUE),
avg_child = mean(bmi_chld, na.rm = TRUE))
melted.df <- melt(income.BMI, id = c("id", "fam_income"))
#Join Averages into a single datasets
income.BMI <- left_join(BMI_average_df, fam_income, by = "id")
melted.df <- melt(income.BMI, id = c("id", "fam_income"))
#Dot plot of unaveraged BMI's and income levels
ggplot(participant_data) +
geom_point(aes(x=fam_income, y=bmi_adults)) +
labs(title = "BMI to Income Level", x = "Income Level", y = "BMI")
#Line plot of averaged BMI's and income levels
BMI.plot <- ggplot(melted.df,mapping = aes(x = fam_income, y = value, color = variable)) +
scale_color_brewer(palette = "Set1") +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Family Income Level",
y = "Average BMIs",
color = "BMI type")
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
